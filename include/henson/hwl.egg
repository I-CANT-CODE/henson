# HWL PEG

{%

#include <string>
#include <vector>
#include <map>
#include <set>
#include <tuple>
#include <sstream>

namespace hwl
{

struct PuppetCommand
{
    std::string     name;
    std::string     command;
};

struct Variable
{
    std::string     name;
    std::string     value;      // default value
};

struct Command
{
    void            add_string(std::string s)   { strings.push_back(s);   indices.emplace_back( strings.size() - 1,   false ); }
    void            add_variable(Variable v)    { variables.push_back(v); indices.emplace_back( variables.size() - 1, true  ); }

    std::string     generate(const std::map<std::string,std::string>& varmap) const
    {
        std::string result;
        for (auto& x : indices)
        {
            if (std::get<1>(x))     // variable
            {
                auto var = variables[std::get<0>(x)];
                auto it  = varmap.find(var.name);
                if (it == varmap.end())
                    result += var.value;
                else
                    result += it->second;
            } else                  // string
            {
                result += strings[std::get<0>(x)];
            }
        }
        return result;
    }

    std::vector<std::string>            strings;
    std::vector<Variable>               variables;
    std::vector<std::tuple<int,bool>>   indices;
};

struct Statement
{
                    Statement()                                 = default;      // needed for egg
                    Statement(std::string c): call(c)           {}
                    Statement(std::string c, std::vector<Statement> b):
                        call(c), body(b)                        {}

    bool            uses(std::string n) const
    {
        if (call == n) return true;
        if (call[0] == '*' && call.substr(1) == n) return true;
        for (auto& s : body)
            if (s.uses(n))
                return true;
        return false;
    }

    std::string             call;
    std::vector<Statement>  body;
};

struct ControlFlow
{
    ControlFlow&    operator=(std::string name_)                { name = name_; return *this; }

    void            set_body(std::vector<Statement> body)       { commands = body; }
    void            set_control(std::string c)                  { control = c; }
    bool            uses(std::string n) const                   { for (auto& s : commands) if (s.uses(n)) return true; return false; }

    std::string                 name;
    std::vector<Statement>      commands;
    std::string                 control;
};

struct Script
{
    void add_puppet(PuppetCommand pc)           { puppets.push_back(pc); }
    void add_procs(ControlFlow cf)              { procs.emplace(cf.name, cf); }

    std::vector<PuppetCommand>                  puppets;
    std::map<std::string, ControlFlow>          procs;
};

std::string     indent_to_tokens(std::string txt)
{
    std::istringstream  in(txt);
    std::string         line;
    size_t  cur = 0;
    int     count = 0;
    std::string         out;
    while (std::getline(in, line))
    {
        size_t indent = 0;
        for (; indent < line.size(); ++indent)
            if (!std::isspace(line[indent]))
                break;

        if (indent == line.size())      // skip empty lines
            continue;

        if (indent > cur)
        {
            out += "INDENT\n";
            cur = indent;
            count++;
        } else if (indent < cur)
        {
            out += "DEDENT\n";
            cur = indent;
            count--;
        }
        out += line + '\n';
    }

    for (size_t i = 0; i < count; ++i)
        out += "DEDENT\n";

    return out;
}

}

%}

script   : Script               = (  puppet  : x     { psVal.add_puppet(x); }
                                   | procs   : p     { psVal.add_procs(p); }
                                   | _ nl)*

puppet   : PuppetCommand        = name : n _ '=' _ cmd_str : c _ nl     { psVal = { n,c }; }

cmd_str  : std::string          = <(!(nl | '#') .)*> : psVal

procs    : ControlFlow          = name : n _ "while" _ name : c _ ':' _ nl
                                  indent nl
                                    statements : body
                                  dedent nl                             { psVal = n; psVal.set_control(c); psVal.set_body(body); }


statements : std::vector<Statement>   = (  statement:s { psVal.push_back(s); }
                                        | _ nl )+
statement  : Statement                = !(indent | dedent) _ (call:psVal | if_stmt:psVal)

call      : Statement                =  <'*'? name>:n _ (nl | eof)      { psVal = Statement(n); }
if_stmt   : Statement                = "if" _ name : c _ ':' _ nl
                                        indent nl
                                            statements : body
                                        dedent nl                       { psVal = Statement(c, body); }


# parse command string into a list of strings and variables
command   : Command             = (  <(!'$' . )+>:s         { psVal.add_string(s);   }
                                   | variable:v             { psVal.add_variable(v); } )+
# $varname or $varname(default_value)
variable  : Variable            = '$' name : n ('(' <(!')' .)*>:v ')' { psVal.value = v; } )?   { psVal.name = n; }


name     : std::string          = < letter (letter | number | '-')* > : psVal

letter  = [a-z] | [A-Z] | '_'
number  = [0-9]

comment = '#' ( !nl . )*
_       = (space | comment)*
space   = ' ' | '\t'
nl      = "\n\r" | '\n' | '\r'
eof     = !.

indent  = "INDENT"
dedent  = "DEDENT"
